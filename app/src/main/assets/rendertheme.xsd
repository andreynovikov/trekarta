<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:tns="http://opensciencemap.org/rendertheme"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified"
    targetNamespace="http://opensciencemap.org/rendertheme" xml:lang="en">

    <!-- attribute types -->
    <xs:simpleType name="cap">
        <xs:restriction base="xs:string">
            <xs:enumeration value="butt" />
            <xs:enumeration value="round" />
            <xs:enumeration value="square" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="closed">
        <xs:restriction base="xs:string">
            <xs:enumeration value="yes" />
            <xs:enumeration value="no" />
            <xs:enumeration value="any" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="half">
        <xs:restriction base="xs:string">
            <xs:enumeration value="right" />
            <xs:enumeration value="left" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="color">
        <xs:restriction base="xs:string">
            <xs:pattern value="(#([0-9a-fA-F]{6}|[0-9a-fA-F]{8})|color:.+)" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="elementList">
        <xs:restriction base="xs:string">
            <xs:enumeration value="node" />
            <xs:enumeration value="place" />
            <xs:enumeration value="way" />
            <xs:enumeration value="any" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="selectorList">
        <xs:restriction base="xs:string">
            <xs:enumeration value="first" />
            <xs:enumeration value="any" />
            <xs:enumeration value="when-matched" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="fontFamily">
        <xs:restriction base="xs:string">
            <xs:enumeration value="default" />
            <xs:enumeration value="default_bold" />
            <xs:enumeration value="monospace" />
            <xs:enumeration value="sans_serif" />
            <xs:enumeration value="serif" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="fontStyle">
        <xs:restriction base="xs:string">
            <xs:enumeration value="bold" />
            <xs:enumeration value="bold_italic" />
            <xs:enumeration value="italic" />
            <xs:enumeration value="normal" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="nonNegativeFloat">
        <xs:restriction base="xs:float">
            <xs:minInclusive value="0" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="src">
        <xs:restriction base="xs:string">
            <xs:pattern value="((file|assets):)?.+" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="strokeDasharray">
        <xs:restriction base="xs:string">
            <xs:pattern
                value="([0-9]+(\.[0-9]+)? *, *[0-9]+(\.[0-9]+)? *, *)*[0-9]+(\.[0-9]+)? *, *[0-9]+(\.[0-9]+)?" />
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="textKey">
        <xs:restriction base="xs:string">
            <xs:enumeration value="ele" />
            <xs:enumeration value="depth" />
            <xs:enumeration value="addr:housenumber" />
            <xs:enumeration value="name" />
            <xs:enumeration value="ref" />
        </xs:restriction>
    </xs:simpleType>

    <!-- style menu cat element -->
    <xs:complexType name="cat">
        <xs:attribute name="id" type="xs:string" use="required" />
    </xs:complexType>

    <!-- style menu name element -->
    <xs:complexType name="name">
        <xs:attribute name="lang" type="xs:string" use="required" />
        <xs:attribute name="value" type="xs:string" use="required" />
    </xs:complexType>

    <!-- style menu overlay element -->
    <xs:complexType name="overlay">
        <xs:attribute name="id" type="xs:string" use="required" />
    </xs:complexType>

    <!-- style menu layer element -->
    <xs:complexType name="layer">
        <xs:sequence minOccurs="0">
            <xs:element name="name" maxOccurs="unbounded" minOccurs="0" type="tns:name" />
            <xs:element name="cat" maxOccurs="unbounded" minOccurs="0" type="tns:cat" />
            <xs:element name="overlay" maxOccurs="unbounded" minOccurs="0" type="tns:overlay" />
        </xs:sequence>
        <xs:attribute name="id" type="xs:string" use="required" />
        <xs:attribute name="parent" type="xs:string"  />
        <xs:attribute name="visible" default="false" type="xs:boolean"  />
        <xs:attribute name="enabled" default="false" type="xs:boolean"  />
    </xs:complexType>

    <!-- rendering instructions -->
    <xs:complexType name="area">
        <xs:attribute name="cat" type="xs:string"  />
        <xs:attribute name="id" default="0" type="xs:string"  />
        <xs:attribute name="use" default="0" type="xs:string"  />
        <xs:attribute name="src" type="tns:src"  />
        <xs:attribute name="symbol-width" type="xs:positiveInteger"  />
        <xs:attribute name="symbol-height" type="xs:positiveInteger"  />
        <xs:attribute name="symbol-percent" type="xs:positiveInteger"  />
        <xs:attribute name="symbol-color" type="tns:color"  />
        <xs:attribute name="fill" default="#000000" type="tns:color"  />
        <xs:attribute name="stroke" default="#00000000" type="tns:color"  />
        <xs:attribute name="stroke-width" default="0" type="tns:nonNegativeFloat"  />
        <xs:attribute name="fade" default="-1" type="xs:integer"  />
        <xs:attribute name="blend" default="-1" type="xs:integer"  />
        <xs:attribute name="blend-fill" default="#000000" type="tns:color"  />
        <xs:attribute name="mesh" default="false" type="xs:boolean"  />
    </xs:complexType>

    <xs:complexType name="circle">
        <xs:attribute name="cat" type="xs:string"  />
        <xs:attribute name="radius" type="tns:nonNegativeFloat" use="required" />
        <xs:attribute name="scale-radius" default="false" type="xs:boolean"  />
        <xs:attribute name="fill" default="#00000000" type="tns:color"  />
        <xs:attribute name="stroke" default="#00000000" type="tns:color"  />
        <xs:attribute name="stroke-width" default="0" type="tns:nonNegativeFloat"  />
    </xs:complexType>

    <xs:complexType name="line">
        <xs:attribute name="cat" type="xs:string"  />

        <!-- style: TODO only in style-line-->
        <xs:attribute name="id" default="0" type="xs:string"  />

        <!-- inherited style -->
        <xs:attribute name="use" default="0" type="xs:string"  />

        <xs:attribute name="src" type="tns:src"  />
        <xs:attribute name="symbol-width" type="xs:positiveInteger"  />
        <xs:attribute name="symbol-height" type="xs:positiveInteger"  />
        <xs:attribute name="symbol-percent" type="xs:positiveInteger"  />
        <xs:attribute name="symbol-color" type="tns:color"  />
        <xs:attribute name="stroke" default="#000000" type="tns:color"  />
        <xs:attribute name="width" default="0" type="xs:float"  />
        <!-- minimum scaled width to draw outline -->
        <xs:attribute name="min" default="0" type="xs:float"  />
        <xs:attribute name="dasharray" type="tns:strokeDasharray"  />
        <xs:attribute name="cap" default="round" type="tns:cap"  />
        <xs:attribute name="outline" default="" type="xs:string"  />
        <!-- draw right or left half of line, works for not fixed, not textured lines -->
        <xs:attribute name="half" default="" type="tns:half"  />
        <xs:attribute name="fade" default="-1" type="xs:integer"  />
        <xs:attribute name="blur" default="-1" type="xs:float"  />
        <xs:attribute name="fix" default="false" type="xs:boolean"  />
        <xs:attribute name="repeat" default="false" type="xs:boolean"  />
        <xs:attribute name="repeat-gap" default="0" type="xs:positiveInteger"  />
        <xs:attribute name="repeat-start" default="0" type="xs:positiveInteger"  />

        <!-- stipple repeat in 'pixel' -->
        <xs:attribute name="stipple" default="0" type="xs:integer"  />
        <!-- stipple color -->
        <xs:attribute name="stipple-stroke" default="#000000" type="tns:color"  />
        <!-- stipple width relative to line width, i.e 0.0-1.0 -->
        <xs:attribute name="stipple-width" default="0" type="xs:float"  />
        <!-- stipple ratio - 0.5 = equal phase length -->
        <xs:attribute name="stipple-ratio" default="0.5" type="xs:float" />

    </xs:complexType>

    <xs:complexType name="text">
        <xs:attribute name="cat" type="xs:string"  />

        <xs:attribute name="id" default="0" type="xs:string"  />
        <xs:attribute name="use" default="0" type="xs:string"  />

        <xs:attribute name="k" default="name" type="tns:textKey" />
        <xs:attribute name="dy" default="0" type="xs:float"  />
        <xs:attribute name="font-family" default="default" type="tns:fontFamily"  />
        <xs:attribute name="style" default="normal" type="tns:fontStyle"  />
        <xs:attribute name="size" default="0" type="tns:nonNegativeFloat"  />
        <xs:attribute name="fill" default="#000000" type="tns:color"  />
        <xs:attribute name="stroke" default="#000000" type="tns:color"  />
        <xs:attribute name="stroke-width" default="0" type="tns:nonNegativeFloat"  />
        <xs:attribute name="caption" default="false" type="xs:boolean"  />
        <!-- polygon area expressed as a ratio to tile area, e.g. 0.1 for 10% of tile area -->
        <xs:attribute name="area-size" default="0" type="tns:nonNegativeFloat"  />
        <!-- priority for label placement, can be negative to set it lower then default -->
        <xs:attribute name="priority" default="0" type="xs:integer"  />
        <!-- if set to true text is placed even if the line is too short for it -->
        <xs:attribute name="mandatory" default="false" type="xs:boolean" />
        <!-- symbol src name -->
        <xs:attribute name="symbol" type="tns:src"  />
        <xs:attribute name="symbol-width" type="xs:positiveInteger"  />
        <xs:attribute name="symbol-height" type="xs:positiveInteger"  />
        <xs:attribute name="symbol-percent" type="xs:positiveInteger"  />
        <xs:attribute name="symbol-color" type="tns:color"  />
    </xs:complexType>

    <xs:complexType name="symbol">
        <xs:attribute name="cat" type="xs:string"  />

        <xs:attribute name="id" default="0" type="xs:string"  />
        <xs:attribute name="use" default="0" type="xs:string"  />

        <xs:attribute name="src" type="tns:src" />
        <xs:attribute name="symbol-width" type="xs:positiveInteger"  />
        <xs:attribute name="symbol-height" type="xs:positiveInteger"  />
        <xs:attribute name="symbol-percent" type="xs:positiveInteger"  />
        <xs:attribute name="symbol-color" type="tns:color"  />
        <xs:attribute name="billboard" default="false" type="xs:boolean" />
        <!-- if set to true symbol is rotated along the line -->
        <xs:attribute name="rotate" default="false" type="xs:boolean" />
        <!-- if set to true symbol is inverted for 180 degrees after rotation -->
        <xs:attribute name="inverse" default="false" type="xs:boolean" />
        <!-- if set to true symbol is drawn even if the line is too short for it -->
        <xs:attribute name="mandatory" default="false" type="xs:boolean" />
        <!-- if set to true symbol is repeated along line -->
        <xs:attribute name="repeat" default="false" type="xs:boolean"  />
        <xs:attribute name="repeat-start" type="xs:positiveInteger"  />
        <xs:attribute name="repeat-gap" type="xs:positiveInteger"  />
        <xs:attribute name="merge-gap" type="xs:nonNegativeInteger"  />
        <xs:attribute name="merge-group" type="xs:string"  />
        <xs:attribute name="merge-group-gap" type="xs:nonNegativeInteger"  />
        <!-- if set to false do not draw symbol underneath text labels -->
        <xs:attribute name="text-overlap" default="true" type="xs:boolean"  />
        <!-- sets the z-order of a symbol relative to other symbols in case they overlap -->
        <xs:attribute name="z-index" default="0" type="xs:integer"  />
    </xs:complexType>

    <xs:complexType name="extrusion">
        <xs:attribute name="cat" type="xs:string"  />
        <xs:attribute name="line-color" type="tns:color"  />
        <xs:attribute name="side-color" type="tns:color" use="required" />
        <xs:attribute name="top-color" type="tns:color" use="required" />
        <xs:attribute name="hsv-h" default="0" type="xs:double" use="optional" />
        <xs:attribute name="hsv-s" default="1" type="xs:double" use="optional" />
        <xs:attribute name="hsv-v" default="1" type="xs:double" use="optional" />
    </xs:complexType>

    <!-- match elements -->
    <xs:complexType name="m">
        <xs:choice maxOccurs="unbounded" minOccurs="0">
            <!-- recursion to allow for nested m -->
            <xs:element name="m" type="tns:m" />

            <xs:element name="area" type="tns:area" />
            <xs:element name="circle" type="tns:circle" />
            <xs:element name="line" type="tns:line" />
            <xs:element name="outline" type="tns:line" />
            <xs:element name="lineSymbol" type="tns:line" />
            <xs:element name="text" type="tns:text" />
            <xs:element name="extrusion" type="tns:extrusion" />
            <xs:element name="symbol" type="tns:symbol" />

            <!-- outline is defined within rules to match layering -->
            <xs:element name="outline-layer" type="tns:line" />
        </xs:choice>

        <xs:attribute name="select" default="any" type="tns:selectorList"  />
        <xs:attribute name="e" type="tns:elementList"  />
        <xs:attribute name="k" type="xs:string"  />
        <xs:attribute name="v" type="xs:string"  />
        <xs:attribute name="cat" type="xs:string"  />
        <xs:attribute name="closed" default="any" type="tns:closed"  />
        <xs:attribute name="zoom-min" default="0" type="xs:unsignedByte"  />
        <xs:attribute name="zoom-max" default="127" type="xs:unsignedByte"  />
    </xs:complexType>

    <xs:complexType name="atlasRect">
        <xs:attribute name="id" type="xs:string" use="required" />
        <xs:attribute name="pos" type="xs:string" use="required" />
    </xs:complexType>

    <xs:complexType name="atlas">
        <xs:choice maxOccurs="unbounded" minOccurs="0">
            <xs:element name="rect" type="tns:atlasRect" />
        </xs:choice>
        <xs:attribute name="img" type="xs:string" use="required" />
    </xs:complexType>

    <!-- stylemenu element -->
    <xs:complexType name="stylemenu">
        <xs:sequence minOccurs="0">
            <xs:element name="layer" maxOccurs="unbounded" minOccurs="0" type="tns:layer" />
        </xs:sequence>
        <xs:attribute name="defaultvalue" type="xs:string" use="required" />
        <xs:attribute name="defaultlang" type="xs:string" use="required" />
        <xs:attribute name="id" type="xs:string" use="required" />
    </xs:complexType>

    <xs:complexType name="style-color">
        <xs:attribute name="id" default="0" type="xs:string" use="required" />
        <xs:attribute name="color" default="#000000" type="tns:color" use="required" />
    </xs:complexType>

    <!-- tag-transform element -->
    <xs:complexType name="tag-transform">
        <xs:attribute name="k" type="xs:string" use="required" />
        <xs:attribute name="v" type="xs:string" use="optional" />
        <xs:attribute name="k-lib" type="xs:string" use="required" />
        <xs:attribute name="v-lib" type="xs:string" use="optional" />
    </xs:complexType>

    <!-- rendertheme element -->
    <xs:complexType name="rendertheme">
        <xs:sequence minOccurs="0">
            <xs:element name="stylemenu" minOccurs="0" type="tns:stylemenu" />

            <!-- tag definitions -->
            <xs:choice maxOccurs="unbounded" minOccurs="0">
                <xs:element name="tag-transform" type="tns:tag-transform" />
            </xs:choice>

            <!-- style definitions -->
            <xs:sequence maxOccurs="256" minOccurs="0">
                <xs:choice maxOccurs="unbounded" minOccurs="0">
                    <xs:element name="style-color" type="tns:style-color" />
                    <xs:element name="style-text" type="tns:text" />
                    <xs:element name="style-symbol" type="tns:symbol" />
                    <xs:element name="style-area" type="tns:area" />
                    <xs:element name="style-line" type="tns:line" />
                    <!-- <xs:element name="style-outline" type="tns:line" /> -->
                </xs:choice>
            </xs:sequence>

            <xs:choice minOccurs="0">
                <xs:element name="atlas" type="tns:atlas" />
            </xs:choice>

            <!-- matching rules -->
            <xs:sequence maxOccurs="unbounded" minOccurs="0">
                <xs:element name="m" type="tns:m" />
            </xs:sequence>
        </xs:sequence>
        <xs:attribute name="version" type="xs:positiveInteger" use="required" />
        <xs:attribute name="map-background" default="#ffffff" type="tns:color"  />
        <xs:attribute name="base-stroke-width" default="1" type="tns:nonNegativeFloat"
             />
        <xs:attribute name="base-text-scale" default="1" type="tns:nonNegativeFloat"
             />
    </xs:complexType>

    <!-- root element -->
    <xs:element name="rendertheme" type="tns:rendertheme" />
</xs:schema>
